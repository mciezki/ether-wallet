{"version":3,"sources":["components/Form.js","components/Transaction.js","components/Balance.js","components/Crypto.js","components/App.js","index.js"],"names":["Form","handleAccess","useState","inputValue","setInputValue","onSubmit","e","name","className","type","placeholder","value","onChange","target","Transaction","mnemonic","provider","walletId","addressBalance","receiver","setReceiver","cryptoValue","setCryptoValue","handleChange","alert","sendCrypto","a","preventDefault","tx","to","parseEther","node","Wallet","fromMnemonic","console","log","checkTransaction","signTransaction","connect","sendTransaction","Balance","walletAddresses","addressInQueue","addressesNumber","setQueue","openBalance","setOpenBalance","setAddressBalance","setWalletId","handleQueue","id","prevState","selectAddress","getBalance","then","response","formatEther","_hex","selectList","map","address","index","onClick","Crypto","setMnemonic","setWalletAddresses","setAddressInQueue","getDefaultProvider","handleMnemonic","useCallback","useEffect","addressList","i","getAddress","push","length","App","mnemonicPhrase","setMnemonicPhrase","number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7e98a94.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react'\r\n\r\n\r\nconst Form = ({ handleAccess }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { value } = e.target;\r\n        setInputValue(value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={(e) => handleAccess(e, inputValue)}>\r\n                <label>Mnemonic Phrase: </label>\r\n                <input\r\n                    name=\"mnemonicWords\"\r\n                    className=\"mnemonic\"\r\n                    type=\"text\"\r\n                    placeholder=\"12/24 words...\"\r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\">Enter</button>\r\n            </form>\r\n            <div className=\"test-wallet\">\r\n                <h3>Test Mnemonic Phrase:</h3>\r\n                <p>before arrest guilt dirt inherit sun affair ship canoe keep explain dumb</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useState } from 'react'\r\n\r\nimport { Wallet } from \"ethers\";\r\nimport { parseEther } from 'ethers/lib/utils';\r\n\r\n// \"before arrest guilt dirt inherit sun affair ship canoe keep explain dumb\"\r\n\r\nconst Transaction = ({ mnemonic, provider, walletId, addressBalance }) => {\r\n    const [receiver, setReceiver] = useState('');\r\n    const [cryptoValue, setCryptoValue] = useState(0);\r\n\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        switch (name) {\r\n            case 'receiver':\r\n                setReceiver(value);\r\n                break;\r\n            case 'cryptoValue':\r\n                setCryptoValue(value);\r\n                break;\r\n            default:\r\n                alert(`Sorry, ${name} does not exist. Report this to us and we will check what happened.`);\r\n        }\r\n    }\r\n\r\n    const sendCrypto = async (e) => {\r\n        e.preventDefault();\r\n        if (receiver === \"\") return alert(\"Who is receiver?\");\r\n        if (cryptoValue <= 0 || cryptoValue > addressBalance) return alert(\"Incorrect value\");\r\n        const tx = { to: receiver, value: parseEther(cryptoValue) }\r\n        let node = Wallet.fromMnemonic(`${mnemonic}`, `m/44'/60'/0'/0/${walletId}`);\r\n        console.log(node.checkTransaction(tx))\r\n        await node.signTransaction(tx)\r\n        node = node.connect(provider);\r\n        await node.sendTransaction(tx);\r\n        alert('Transaction sent. Wait a moment and check your wallet. It can take minute or two :)');\r\n        setReceiver('');\r\n        setCryptoValue(0);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"transaction-title\">Send Transaction</h3>\r\n            <form className=\"transaction-form\" onSubmit={sendCrypto}>\r\n                <label className=\"to\">To: </label>\r\n                <input type=\"text\" name=\"receiver\" value={receiver} onChange={handleChange} className=\"receiver\" />\r\n                <label className=\"value\">Value: </label>\r\n                <input type=\"number\" name=\"cryptoValue\" value={cryptoValue} onChange={handleChange} className=\"cryptoValue\" />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transaction;","import React, { useState, useCallback } from 'react';\r\nimport Transaction from './Transaction';\r\n\r\nimport { Wallet } from \"ethers\";\r\nimport { formatEther } from 'ethers/lib/utils';\r\n\r\n// \"before arrest guilt dirt inherit sun affair ship canoe keep explain dumb\"\r\n\r\nconst Balance = ({ walletAddresses, mnemonic, provider, addressesNumber, addressInQueue, setQueue }) => {\r\n    const [openBalance, setOpenBalance] = useState(false)\r\n    const [addressBalance, setAddressBalance] = useState('');\r\n    const [walletId, setWalletId] = useState('')\r\n\r\n    const handleQueue = (e) => {\r\n        const { id } = e.target\r\n        switch (id) {\r\n            case 'plus':\r\n                setQueue(prevState => prevState + 5);\r\n                break;\r\n            case 'minus':\r\n                setQueue(prevState => prevState - 5);\r\n                break;\r\n            default:\r\n                alert(`Error, try again :)`);\r\n        }\r\n    }\r\n\r\n\r\n    const selectAddress = async (e) => {\r\n        const id = e.target.id;\r\n        setWalletId(id)\r\n        setAddressBalance('')\r\n        setOpenBalance(true);\r\n        let node = Wallet.fromMnemonic(`${mnemonic}`, `m/44'/60'/0'/0/${id}`);\r\n        node = node.connect(provider);\r\n        await node.getBalance()\r\n            .then(response => formatEther(response._hex))\r\n            .then(response => setAddressBalance(response))\r\n    }\r\n\r\n    const selectList = walletAddresses.map((address, index) => <li key={index} id={index} onClick={selectAddress}>{address}</li>)\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"select-title\">Select Wallet Address:</h3>\r\n            <ul>\r\n                {selectList}\r\n            </ul>\r\n            {addressInQueue >= 5 ? <button id=\"minus\" onClick={handleQueue}>Previous addresses</button> : null}\r\n            <button id=\"plus\" onClick={handleQueue}>Next addresses</button>\r\n            {openBalance ?\r\n                addressBalance ? <div className=\"value-container\"><p className=\"crypto-value\">{addressBalance} <span>ROP</span></p> <Transaction walletId={walletId} addressBalance={addressBalance} mnemonic={mnemonic} provider={provider} /></div>\r\n                    : <p className=\"waiting\">Loading...</p>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Balance;","import React, { useState, useEffect, useCallback } from 'react'\r\nimport Balance from './Balance';\r\n\r\nimport { Wallet, getDefaultProvider } from \"ethers\";\r\n\r\n// \"before arrest guilt dirt inherit sun affair ship canoe keep explain dumb\"\r\n\r\n\r\nconst Crypto = ({ mnemonic, setMnemonic }) => {\r\n    const [walletAddresses, setWalletAddresses] = useState([]);\r\n    const [addressInQueue, setAddressInQueue] = useState(0)\r\n    const provider = getDefaultProvider('ropsten');\r\n\r\n    const handleMnemonic = useCallback(() => {\r\n        setMnemonic('')\r\n    }, [setMnemonic])\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                let addressList = [];\r\n                for (let i = addressInQueue; i < addressInQueue + 5; i++) {\r\n                    let node = Wallet.fromMnemonic(`${mnemonic}`, `m/44'/60'/0'/0/${i}`);\r\n                    node = node.connect(provider);\r\n                    await node.getAddress().then(response => addressList.push(response));\r\n                    console.log(addressList);\r\n                }\r\n                setWalletAddresses(addressList)\r\n            } catch (error) {\r\n                alert(error);\r\n                handleMnemonic()\r\n            }\r\n        })()\r\n    }, [addressInQueue])\r\n\r\n\r\n    return (\r\n        <>{walletAddresses.length ?\r\n            <Balance walletAddresses={walletAddresses} mnemonic={mnemonic} provider={provider} addressInQueue={addressInQueue} setQueue={setAddressInQueue} />\r\n            : <p className=\"loading\">Loading...</p>}</>\r\n    )\r\n}\r\n\r\nexport default Crypto;","import React, { useState } from 'react';\nimport Form from './Form';\nimport Crypto from './Crypto';\nimport './App.css';\n\n\nconst App = () => {\n  const [mnemonicPhrase, setMnemonicPhrase] = useState('');\n\n\n  const handleAccess = (e, mnemonic, number) => {\n    e.preventDefault();\n\n    if (mnemonic === \"\" || number < 1) {\n      return alert(\"Incorrect informations\")\n    }\n    setMnemonicPhrase(mnemonic);\n  }\n\n\n  return (\n    <div className=\"App\">\n      {mnemonicPhrase ? <Crypto mnemonic={mnemonicPhrase} setMnemonic={setMnemonicPhrase} /> : <Form handleAccess={handleAccess} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}